# -*- coding: utf-8 -*-
""" This module contains a local planner to perform
low-level waypoint following based on PID controllers. """

# Author: Runsheng Xu <rxx3386@ucla.edu>
# License:  TDG-Attribution-NonCommercial-NoDistrib

from collections import deque
from enum import Enum
import statistics
import math

import carla
import numpy as np

from opencda.core.common.misc import distance_vehicle, draw_trajetory_points, \
    cal_distance_angle, compute_distance
from opencda.core.plan.spline import Spline2D
from opencda.core.plan.local_planner_behavior import LocalPlanner


class RLLocalPlanner(LocalPlanner):
    """
    RL Local Planner that inherits the single vehicle local planner.
    The route is updated at each step when new action (i.e., target waypoint)
    is generated by the RL model. Other function remains the same.

    """

    # Minimum distance to target waypoint as a percentage
    # (e.g. within 80% of total distance)

    def __init__(self, agent, carla_map, config_yaml):

        super(RLLocalPlanner, self).__init__(agent, carla_map, config_yaml)

    def set_current_plan(self, current_plan):
        """
        Sets new route plan. For RL, the new route plan is based on the new target
        waypoint that selected by RL agent.

        Parameters
        ----------
        current_plan : list
            List of waypoints in the actual plan.

        """
        # For RL, clear waypoint queue each time a new action coming in.
        self.waypoints_queue.clear()
        self._waypoint_buffer.clear()

        # update route
        for elem in current_plan:
            self.waypoints_queue.append(elem)

        # update buffer
        for _ in range(self._buffer_size):
            if self.waypoints_queue:
                self._waypoint_buffer.append(
                    self.waypoints_queue.popleft())
            else:
                break
