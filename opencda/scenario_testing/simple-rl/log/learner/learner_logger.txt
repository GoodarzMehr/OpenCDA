[2022-03-28 11:31:18,072][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 11:33:45,702][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 11:34:13,461][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:07:40,020][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:08:41,558][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:09:29,396][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:10:41,803][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:11:34,286][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 16:53:17,543][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 17:39:45,270][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 17:43:57,234][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 17:44:24,309][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 18:06:22,577][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 18:09:13,038][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 18:10:56,274][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:38:59,543][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:47:14,840][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:57:15,826][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:57:45,994][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:01:13,360][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:21:43,372][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:25:19,365][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:29:21,440][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:31:36,021][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:34:32,636][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:38:42,588][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:39:34,142][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:40:31,973][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:43:00,637][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:52:14,184][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:59:03,853][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:00:45,182][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:14:01,743][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:18:31,093][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:34:47,735][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:35:55,325][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:37:20,325][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:37:58,161][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:40:14,490][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:41:51,141][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:47:07,567][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:51:25,766][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:52:47,803][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:00:14,346][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:04:13,890][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:11:51,728][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:21:45,456][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:26:15,451][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:27:13,601][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:34:52,288][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:42:12,098][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:43:05,419][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:46:01,169][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:46:18,629][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:48:41,030][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:50:34,559][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:53:35,941][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:55:44,905][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:15:58,031][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:21:31,073][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:23:33,992][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:25:52,483][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:27:46,418][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:33:04,666][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:37:06,760][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:37:58,590][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:43:50,349][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:49:06,823][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:54:41,783][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:55:41,614][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:59:47,167][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:16:25,243][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:17:58,867][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:22:51,055][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:25:31,087][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:26:47,168][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:30:56,438][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
