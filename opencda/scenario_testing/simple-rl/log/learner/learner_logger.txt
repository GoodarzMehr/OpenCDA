[2022-03-28 11:31:18,072][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 11:33:45,702][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 11:34:13,461][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:07:40,020][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:08:41,558][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:09:29,396][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:10:41,803][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 13:11:34,286][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-28 16:53:17,543][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 17:39:45,270][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 17:43:57,234][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 17:44:24,309][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 18:06:22,577][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 18:09:13,038][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-30 18:10:56,274][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:38:59,543][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:47:14,840][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:57:15,826][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 15:57:45,994][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:01:13,360][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:21:43,372][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:25:19,365][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:29:21,440][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:31:36,021][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:34:32,636][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:38:42,588][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:39:34,142][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:40:31,973][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:43:00,637][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:52:14,184][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 16:59:03,853][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:00:45,182][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:14:01,743][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:18:31,093][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:34:47,735][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:35:55,325][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:37:20,325][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:37:58,161][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:40:14,490][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:41:51,141][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:47:07,567][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:51:25,766][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 17:52:47,803][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:00:14,346][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:04:13,890][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:11:51,728][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:21:45,456][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:26:15,451][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:27:13,601][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:34:52,288][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:42:12,098][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:43:05,419][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:46:01,169][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:46:18,629][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:48:41,030][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:50:34,559][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:53:35,941][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 18:55:44,905][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:15:58,031][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:21:31,073][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:23:33,992][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:25:52,483][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:27:46,418][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:33:04,666][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:37:06,760][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:37:58,590][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:43:50,349][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:49:06,823][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:54:41,783][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:55:41,614][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 19:59:47,167][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:16:25,243][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:17:58,867][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:22:51,055][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:25:31,087][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:26:47,168][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-03-31 20:30:56,438][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-20 20:38:00,068][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 11:08:23,156][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 11:13:08,194][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 11:15:41,311][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 11:26:19,713][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 11:27:20,825][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:00:34,406][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:05:25,825][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:06:17,988][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:07:48,448][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:12:22,046][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:17:39,965][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:19:50,692][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:20:35,572][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:21:19,806][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:22:39,815][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:28:55,234][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:29:44,619][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 12:57:52,992][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-21 15:10:11,290][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 10:09:21,909][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 10:31:49,055][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 10:33:26,440][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 10:36:45,364][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 10:54:55,019][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 10:56:08,617][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 11:04:20,904][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 11:09:51,374][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 11:28:21,486][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:17:47,395][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:37:31,901][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:38:44,445][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:40:38,561][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:44:23,571][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:47:36,208][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:48:05,516][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:48:54,949][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 12:53:18,650][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 13:06:07,970][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 13:06:44,138][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 13:07:29,634][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 14:35:24,454][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 14:52:38,397][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 14:54:09,341][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 14:54:30,317][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 14:56:59,627][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 14:59:59,528][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 15:05:20,384][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 15:26:34,977][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 15:29:32,204][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 15:37:44,548][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 15:38:22,923][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 15:57:40,705][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 16:34:37,376][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 16:43:43,931][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 16:44:44,506][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 17:19:43,760][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 17:20:49,462][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 17:21:47,618][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 17:30:14,918][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-22 20:23:32,420][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 00:08:06,508][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 00:44:03,265][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 01:11:55,276][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 01:18:43,137][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 01:24:18,901][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 01:43:05,706][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 01:57:30,367][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 01:59:41,640][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 15:17:04,285][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 15:24:49,726][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 15:36:00,056][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 15:50:15,444][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 15:51:48,562][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-23 15:53:26,960][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-24 20:26:41,912][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:27:52,432][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:28:59,802][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:29:49,110][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:30:50,618][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:41:17,871][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:42:04,916][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:43:24,650][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:44:22,420][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 17:52:18,720][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 18:19:26,729][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-04-25 18:34:02,908][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=21, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
